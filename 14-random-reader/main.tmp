package main

import (
	"bufio"
	"crypto/rand"
	"fmt"
	"io"
	"log"
)

type Reader struct {
	b   []byte
	idx int
}

func (r *Reader) Read(b []byte) (int, error) {
	if r.idx >= len(r.b) {
		return 0, io.EOF
	}
	data := r.b[r.idx:]

	for i := 0; i < len(b); i++ {
		if i >= len(data) {
			r.idx = len(r.b)
			return i, io.EOF
		}
		b[i] = data[i]
	}
	r.idx += len(b)

	return len(b), nil
}

func RandomReader(max int) io.Reader {
	b := make([]byte, max)
	_, err := rand.Read(b)
	if err != nil {
		log.Fatal(err)
	}

	return &Reader{b, 0}
}

func main() {
	rnd := RandomReader(5)
	rd := bufio.NewReader(rnd)
	for {
		b, err := rd.ReadByte()
		if err == io.EOF {
			break
		}
		if err != nil {
			panic(err)
		}
		fmt.Printf("%d ", b)
	}
	fmt.Println()
	// 1 148 253 194 250
}
